/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.7
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package com.netxsolutions.idx.impex;

import android.graphics.Bitmap;
import android.util.Log;

import java.nio.ByteBuffer;

public class NIST {
  private static final String TAG = NIST.class.getSimpleName();
  private transient long swigCPtr;
  protected transient boolean swigCMemOwn;

  protected NIST(long cPtr, boolean cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = cPtr;
  }

  protected static long getCPtr(NIST obj) {
    return (obj == null) ? 0 : obj.swigCPtr;
  }

  protected void finalize() {
    delete();
  }

  public synchronized void delete() {
    if (swigCPtr != 0) {
      if (swigCMemOwn) {
        swigCMemOwn = false;
        NISTWrapperJNI.delete_NIST(swigCPtr);
      }
      swigCPtr = 0;
    }
  }


// JJ Added manually
  public Bitmap GetBitmap(int fieldid, int fieldindex)
  {
	  //  Bitmap gg = Bitmap.createBitmap(50, 50, Config.ARGB_8888);

		
	//	for (int x = 0; x < 50; x++) {
	//		for (int y = 0; y < 50; y++) {
	//			gg.setPixel(x, y , Color.rgb(x*5, y*5, (int) (x+y*2.5)));
	//		}
	//	}
	//	return gg;
		
		int[] width = new int[] { 0 };
	    int[] height = new int[] { 0 };
	//    byte[] decoded = libwebp.WebPDecodeARGB(encoded, encoded.length, width, height);
	  //  byte[] decoded = GetRecordImageDecodedAlt(fieldid, fieldindex);
		byte[] decoded = GetRecordImageDecoded(fieldid, fieldindex,width, height);

	    int[] pixels = new int[decoded.length / 4];
	    ByteBuffer.wrap(decoded).asIntBuffer().get(pixels);

	 //   return Bitmap.createBitmap(pixels, width[0], height[0], Bitmap.Config.ARGB_8888);
		 return Bitmap.createBitmap(pixels, width[0], height[0], Bitmap.Config.ARGB_8888);

  }


  public NIST() {
    this(NISTWrapperJNI.new_NIST(), true);
  }

  public int LoadNISTFile(String filePath) {
    return NISTWrapperJNI.NIST_LoadNISTFile(swigCPtr, this, filePath);
  }

  public int LoadNISTFileFromMemory(SWIGTYPE_p_unsigned_char buffer, int bufferSize) {
    return NISTWrapperJNI.NIST_LoadNISTFileFromMemory(swigCPtr, this, SWIGTYPE_p_unsigned_char.getCPtr(buffer), bufferSize);
  }

  public int SaveNISTFile(String filePath) {
    Log.d(TAG, "SaveNISTFile: called ak print file path:"+filePath);
    return NISTWrapperJNI.NIST_SaveNISTFile(swigCPtr, this, filePath);
  }

  public int SaveNISTXMLFile(String filePath) {
    return NISTWrapperJNI.NIST_SaveNISTXMLFile(swigCPtr, this, filePath);
  }

  public int SaveNISTTextFile(String filePath) {
    return NISTWrapperJNI.NIST_SaveNISTTextFile(swigCPtr, this, filePath);
  }

  public int NewNIST() {
    return NISTWrapperJNI.NIST_NewNIST(swigCPtr, this);
  }

  public int Clear() {
    return NISTWrapperJNI.NIST_Clear(swigCPtr, this);
  }

  public int AddField(int fieldId, int fieldNumber, String fieldValue) {
    return NISTWrapperJNI.NIST_AddField(swigCPtr, this, fieldId, fieldNumber, fieldValue);
  }

  public int DeleteField(int fieldId, int fieldNumber) {
    return NISTWrapperJNI.NIST_DeleteField(swigCPtr, this, fieldId, fieldNumber);
  }

  public String GetFieldValueJava(int fieldId, int fieldNumber) {
    return NISTWrapperJNI.NIST_GetFieldValueJava(swigCPtr, this, fieldId, fieldNumber);
  }

  public int GetFieldSize(int fieldId, int fieldNumber, SWIGTYPE_p_int ofieldSize) {
    return NISTWrapperJNI.NIST_GetFieldSize(swigCPtr, this, fieldId, fieldNumber, SWIGTYPE_p_int.getCPtr(ofieldSize));
  }

  public String GetIndexedFieldValueJava(int fieldid, int fieldnumber, int fieldindex) {
    return NISTWrapperJNI.NIST_GetIndexedFieldValueJava(swigCPtr, this, fieldid, fieldnumber, fieldindex);
  }

  public int GetIndexedFieldSize(int fieldId, int fieldNumber, int fieldIndex, SWIGTYPE_p_int ofieldSize) {
    return NISTWrapperJNI.NIST_GetIndexedFieldSize(swigCPtr, this, fieldId, fieldNumber, fieldIndex, SWIGTYPE_p_int.getCPtr(ofieldSize));
  }

  public int GetIndexedItemValue(int fieldId, int fieldNumber, int fieldIndex, SWIGTYPE_p_p_char ofieldValue, int item, int subItem) {
    return NISTWrapperJNI.NIST_GetIndexedItemValue(swigCPtr, this, fieldId, fieldNumber, fieldIndex, SWIGTYPE_p_p_char.getCPtr(ofieldValue), item, subItem);
  }

  public int AddIndexedField(int fieldId, int fieldNumber, String fieldValue, int fieldIndex) {
    return NISTWrapperJNI.NIST_AddIndexedField(swigCPtr, this, fieldId, fieldNumber, fieldValue, fieldIndex);
  }

  public int DeleteIndexedField(int fieldId, int fieldNumber, int fieldIndex) {
    return NISTWrapperJNI.NIST_DeleteIndexedField(swigCPtr, this, fieldId, fieldNumber, fieldIndex);
  }

  public int DeleteIndexedRecord(int fieldId, int fieldIndex) {
    return NISTWrapperJNI.NIST_DeleteIndexedRecord(swigCPtr, this, fieldId, fieldIndex);
  }

  public int GetRecordCount(int recordType) {
    return NISTWrapperJNI.NIST_GetRecordCount(swigCPtr, this, recordType);
  }

  public int SaveBinaryImage(int recordType, int recordIndex, String filePath) {
    return NISTWrapperJNI.NIST_SaveBinaryImage(swigCPtr, this, recordType, recordIndex, filePath);
  }

  public int NIST_To_IAFIS() {
    return NISTWrapperJNI.NIST_NIST_To_IAFIS(swigCPtr, this);
  }

  public int IAFIS_To_NIST() {
    return NISTWrapperJNI.NIST_IAFIS_To_NIST(swigCPtr, this);
  }

  public int AddFingerprintImage(String filePath, FingerPosition fingerCode, ImpressionType impressionType) {
    return NISTWrapperJNI.NIST_AddFingerprintImage(swigCPtr, this, filePath, fingerCode.swigValue(), impressionType.swigValue());
  }

  public int AddFacialImage(String filePath, String poseCode) {
    return NISTWrapperJNI.NIST_AddFacialImage(swigCPtr, this, filePath, poseCode);
  }

  public int AddType16Image(String filePath) {
    return NISTWrapperJNI.NIST_AddType16Image(swigCPtr, this, filePath);
  }

  public int AddType17Image(String filePath, IrisType irisCode) {
    return NISTWrapperJNI.NIST_AddType17Image(swigCPtr, this, filePath, irisCode.swigValue());
  }

  public int AddType7Image(String filePath, FingerPosition fingerCode, ImpressionType impressionType) {
    return NISTWrapperJNI.NIST_AddType7Image__SWIG_0(swigCPtr, this, filePath, fingerCode.swigValue(), impressionType.swigValue());
  }

  public int AddType7Image(String filepath, int FingerCode, int ImpressionType, int recordFormat) {
    return NISTWrapperJNI.NIST_AddType7Image__SWIG_1(swigCPtr, this, filepath, FingerCode, ImpressionType, recordFormat);
  }

  public int AddType8Image(String filepath, SignatureRepresentationType signatureRepresentationType, SignatureType signatureType, int width, int height) {
    return NISTWrapperJNI.NIST_AddType8Image(swigCPtr, this, filepath, signatureRepresentationType.swigValue(), signatureType.swigValue(), width, height);
  }

  public int AddType11(AudioObjectDescriptorCode audioObjectDescriptorCode, AcquisitionSourceType acquisitionSourceType, String audioLocation) {
    return NISTWrapperJNI.NIST_AddType11(swigCPtr, this, audioObjectDescriptorCode.swigValue(), acquisitionSourceType.swigValue(), audioLocation);
  }

  public int AddType13Image(String filepath, FingerPosition fingerCode, ImpressionType impressionType) {
    return NISTWrapperJNI.NIST_AddType13Image(swigCPtr, this, filepath, fingerCode.swigValue(), impressionType.swigValue());
  }

  public int AddType15Image(String filePath, FingerPosition fingerCode, ImpressionType impressionType) {
    return NISTWrapperJNI.NIST_AddType15Image(swigCPtr, this, filePath, fingerCode.swigValue(), impressionType.swigValue());
  }

  public int GetBinaryImage(int recordType, int recordIndex, SWIGTYPE_p_unsigned_char binaryImage, SWIGTYPE_p_long binaryImageSize) {
    return NISTWrapperJNI.NIST_GetBinaryImage(swigCPtr, this, recordType, recordIndex, SWIGTYPE_p_unsigned_char.getCPtr(binaryImage), SWIGTYPE_p_long.getCPtr(binaryImageSize));
  }

  public byte[] GetRecordImageDecodedAltWH(int record_type, int record_index, int[] width, int[] height) { return NISTWrapperJNI.NIST_GetRecordImageDecodedAltWH(swigCPtr, this, record_type, record_index, width, height); }

  public byte[] GetRecordImageDecodedAlt(int record_type, int record_index) { return NISTWrapperJNI.NIST_GetRecordImageDecodedAlt(swigCPtr, this, record_type, record_index); }

  public byte[] GetRecordImageDecoded(int record_type, int record_index, int[] width, int[] height) { return NISTWrapperJNI.NIST_GetRecordImageDecoded(swigCPtr, this, record_type, record_index, width, height); }

  public int GenerateRecordHash(int fieldId, int fieldIndex) {
    return NISTWrapperJNI.NIST_GenerateRecordHash(swigCPtr, this, fieldId, fieldIndex);
  }

  public int VerifyRecordHash(int fieldId, int fieldIndex) {
    return NISTWrapperJNI.NIST_VerifyRecordHash(swigCPtr, this, fieldId, fieldIndex);
  }

  public int GetBinaryImageFormat(int recordType, int recordIndex) {
    return NISTWrapperJNI.NIST_GetBinaryImageFormat(swigCPtr, this, recordType, recordIndex);
  }

  public int GetIndexedItemCount(int fieldId, int fieldNumber, int fieldIndex) {
    return NISTWrapperJNI.NIST_GetIndexedItemCount(swigCPtr, this, fieldId, fieldNumber, fieldIndex);
  }

  public int GetTotalRecordCount() {
    return NISTWrapperJNI.NIST_GetTotalRecordCount(swigCPtr, this);
  }

  public int GetRecordTypeByIndex(int recordIndex) {
    return NISTWrapperJNI.NIST_GetRecordTypeByIndex(swigCPtr, this, recordIndex);
  }

  public int GetFieldTypeByIndex(int recordIndex, int fieldIndex, int[] recordType, int[] fieldNumber) {
    return NISTWrapperJNI.NIST_GetFieldTypeByIndex(swigCPtr, this, recordIndex, fieldIndex, recordType, fieldNumber);
  }

  public int GetLicenceState() {
    return NISTWrapperJNI.NIST_GetLicenceState(swigCPtr, this);
  }

  public boolean IsLicensed() {
    return NISTWrapperJNI.NIST_IsLicensed(swigCPtr, this);
  }

  public int UseZeroPaddedIDC(boolean enable) {
    return NISTWrapperJNI.NIST_UseZeroPaddedIDC(swigCPtr, this, enable);
  }

  public int AuthenticateLicence(String licencedTo, String licence) {
    return NISTWrapperJNI.NIST_AuthenticateLicence(swigCPtr, this, licencedTo, licence);
  }

  public final static class FingerPosition {
    public final static NIST.FingerPosition UNKNOWN = new NIST.FingerPosition("UNKNOWN", NISTWrapperJNI.NIST_UNKNOWN_get());
    public final static NIST.FingerPosition RIGHT_THUMB = new NIST.FingerPosition("RIGHT_THUMB", NISTWrapperJNI.NIST_RIGHT_THUMB_get());
    public final static NIST.FingerPosition RIGHT_INDEX_FINGER = new NIST.FingerPosition("RIGHT_INDEX_FINGER", NISTWrapperJNI.NIST_RIGHT_INDEX_FINGER_get());
    public final static NIST.FingerPosition RIGHT_MIDDLE_FINGER = new NIST.FingerPosition("RIGHT_MIDDLE_FINGER", NISTWrapperJNI.NIST_RIGHT_MIDDLE_FINGER_get());
    public final static NIST.FingerPosition RIGHT_RING_FINGER = new NIST.FingerPosition("RIGHT_RING_FINGER", NISTWrapperJNI.NIST_RIGHT_RING_FINGER_get());
    public final static NIST.FingerPosition RIGHT_LITTLE_FINGER = new NIST.FingerPosition("RIGHT_LITTLE_FINGER", NISTWrapperJNI.NIST_RIGHT_LITTLE_FINGER_get());
    public final static NIST.FingerPosition LEFT_THUMB = new NIST.FingerPosition("LEFT_THUMB", NISTWrapperJNI.NIST_LEFT_THUMB_get());
    public final static NIST.FingerPosition LEFT_INDEX_FINGER = new NIST.FingerPosition("LEFT_INDEX_FINGER", NISTWrapperJNI.NIST_LEFT_INDEX_FINGER_get());
    public final static NIST.FingerPosition LEFT_MIDDLE_FINGER = new NIST.FingerPosition("LEFT_MIDDLE_FINGER", NISTWrapperJNI.NIST_LEFT_MIDDLE_FINGER_get());
    public final static NIST.FingerPosition LEFT_RING_FINGER = new NIST.FingerPosition("LEFT_RING_FINGER", NISTWrapperJNI.NIST_LEFT_RING_FINGER_get());
    public final static NIST.FingerPosition LEFT_LITTLE_FINGER = new NIST.FingerPosition("LEFT_LITTLE_FINGER", NISTWrapperJNI.NIST_LEFT_LITTLE_FINGER_get());
    public final static NIST.FingerPosition PLAIN_RIGHT_THUMB = new NIST.FingerPosition("PLAIN_RIGHT_THUMB", NISTWrapperJNI.NIST_PLAIN_RIGHT_THUMB_get());
    public final static NIST.FingerPosition PLAIN_LEFT_THUMB = new NIST.FingerPosition("PLAIN_LEFT_THUMB", NISTWrapperJNI.NIST_PLAIN_LEFT_THUMB_get());
    public final static NIST.FingerPosition PLAIN_RIGHT_FOUR_FINGERS = new NIST.FingerPosition("PLAIN_RIGHT_FOUR_FINGERS", NISTWrapperJNI.NIST_PLAIN_RIGHT_FOUR_FINGERS_get());
    public final static NIST.FingerPosition PLAIN_LEFT_FOUR_FINGERS = new NIST.FingerPosition("PLAIN_LEFT_FOUR_FINGERS", NISTWrapperJNI.NIST_PLAIN_LEFT_FOUR_FINGERS_get());
    public final static NIST.FingerPosition LEFT_AND_RIGHT_THUMBS = new NIST.FingerPosition("LEFT_AND_RIGHT_THUMBS", NISTWrapperJNI.NIST_LEFT_AND_RIGHT_THUMBS_get());
    public final static NIST.FingerPosition RIGHT_EXTRA_DIGIT = new NIST.FingerPosition("RIGHT_EXTRA_DIGIT", NISTWrapperJNI.NIST_RIGHT_EXTRA_DIGIT_get());
    public final static NIST.FingerPosition LEFT_EXTRA_DIGIT = new NIST.FingerPosition("LEFT_EXTRA_DIGIT", NISTWrapperJNI.NIST_LEFT_EXTRA_DIGIT_get());
    public final static NIST.FingerPosition UNKNOWN_FRICTION_RIDGE = new NIST.FingerPosition("UNKNOWN_FRICTION_RIDGE", NISTWrapperJNI.NIST_UNKNOWN_FRICTION_RIDGE_get());
    public final static NIST.FingerPosition EJI_OR_TIP = new NIST.FingerPosition("EJI_OR_TIP", NISTWrapperJNI.NIST_EJI_OR_TIP_get());
    public final static NIST.FingerPosition UNKNOWN_PALM = new NIST.FingerPosition("UNKNOWN_PALM", NISTWrapperJNI.NIST_UNKNOWN_PALM_get());
    public final static NIST.FingerPosition RIGHT_FULL_PALM = new NIST.FingerPosition("RIGHT_FULL_PALM", NISTWrapperJNI.NIST_RIGHT_FULL_PALM_get());
    public final static NIST.FingerPosition RIGHT_WRITERS_PALM = new NIST.FingerPosition("RIGHT_WRITERS_PALM", NISTWrapperJNI.NIST_RIGHT_WRITERS_PALM_get());
    public final static NIST.FingerPosition LEFT_FULL_PALM = new NIST.FingerPosition("LEFT_FULL_PALM", NISTWrapperJNI.NIST_LEFT_FULL_PALM_get());
    public final static NIST.FingerPosition LEFT_WRITERS_PALM = new NIST.FingerPosition("LEFT_WRITERS_PALM", NISTWrapperJNI.NIST_LEFT_WRITERS_PALM_get());
    public final static NIST.FingerPosition RIGHT_LOWER_PALM = new NIST.FingerPosition("RIGHT_LOWER_PALM", NISTWrapperJNI.NIST_RIGHT_LOWER_PALM_get());
    public final static NIST.FingerPosition RIGHT_UPPER_PALM = new NIST.FingerPosition("RIGHT_UPPER_PALM", NISTWrapperJNI.NIST_RIGHT_UPPER_PALM_get());
    public final static NIST.FingerPosition LEFT_LOWER_PALM = new NIST.FingerPosition("LEFT_LOWER_PALM", NISTWrapperJNI.NIST_LEFT_LOWER_PALM_get());
    public final static NIST.FingerPosition LEFT_UPPER_PALM = new NIST.FingerPosition("LEFT_UPPER_PALM", NISTWrapperJNI.NIST_LEFT_UPPER_PALM_get());
    public final static NIST.FingerPosition RIGHT_OTHER = new NIST.FingerPosition("RIGHT_OTHER", NISTWrapperJNI.NIST_RIGHT_OTHER_get());
    public final static NIST.FingerPosition LEFT_OTHER = new NIST.FingerPosition("LEFT_OTHER", NISTWrapperJNI.NIST_LEFT_OTHER_get());
    public final static NIST.FingerPosition RIGHT_INTERDIGITAL = new NIST.FingerPosition("RIGHT_INTERDIGITAL", NISTWrapperJNI.NIST_RIGHT_INTERDIGITAL_get());
    public final static NIST.FingerPosition RIGHT_THENAR = new NIST.FingerPosition("RIGHT_THENAR", NISTWrapperJNI.NIST_RIGHT_THENAR_get());
    public final static NIST.FingerPosition RIGHT_HYPOTHENAR = new NIST.FingerPosition("RIGHT_HYPOTHENAR", NISTWrapperJNI.NIST_RIGHT_HYPOTHENAR_get());
    public final static NIST.FingerPosition LEFT_INTERDIGITAL = new NIST.FingerPosition("LEFT_INTERDIGITAL", NISTWrapperJNI.NIST_LEFT_INTERDIGITAL_get());
    public final static NIST.FingerPosition LEFT_THENAR = new NIST.FingerPosition("LEFT_THENAR", NISTWrapperJNI.NIST_LEFT_THENAR_get());
    public final static NIST.FingerPosition LEFT_HYPOTHENAR = new NIST.FingerPosition("LEFT_HYPOTHENAR", NISTWrapperJNI.NIST_LEFT_HYPOTHENAR_get());
    public final static NIST.FingerPosition RIGHT_GRASP = new NIST.FingerPosition("RIGHT_GRASP", NISTWrapperJNI.NIST_RIGHT_GRASP_get());
    public final static NIST.FingerPosition LEFT_GRASP = new NIST.FingerPosition("LEFT_GRASP", NISTWrapperJNI.NIST_LEFT_GRASP_get());
    public final static NIST.FingerPosition RIGHT_CARPAL_DELTA_AREA = new NIST.FingerPosition("RIGHT_CARPAL_DELTA_AREA", NISTWrapperJNI.NIST_RIGHT_CARPAL_DELTA_AREA_get());
    public final static NIST.FingerPosition LEFT_CARPAL_DELTA_AREA = new NIST.FingerPosition("LEFT_CARPAL_DELTA_AREA", NISTWrapperJNI.NIST_LEFT_CARPAL_DELTA_AREA_get());
    public final static NIST.FingerPosition RIGHT_FULL_PALM_INC_WRITERS_PALM = new NIST.FingerPosition("RIGHT_FULL_PALM_INC_WRITERS_PALM", NISTWrapperJNI.NIST_RIGHT_FULL_PALM_INC_WRITERS_PALM_get());
    public final static NIST.FingerPosition LEFT_FULL_PALM_INC_WRITERS_PALM = new NIST.FingerPosition("LEFT_FULL_PALM_INC_WRITERS_PALM", NISTWrapperJNI.NIST_LEFT_FULL_PALM_INC_WRITERS_PALM_get());
    public final static NIST.FingerPosition RIGHT_WRIST_BRACELET = new NIST.FingerPosition("RIGHT_WRIST_BRACELET", NISTWrapperJNI.NIST_RIGHT_WRIST_BRACELET_get());
    public final static NIST.FingerPosition LEFT_WRIST_BRACELET = new NIST.FingerPosition("LEFT_WRIST_BRACELET", NISTWrapperJNI.NIST_LEFT_WRIST_BRACELET_get());

    public final int swigValue() {
      return swigValue;
    }

    public String toString() {
      return swigName;
    }

    public static FingerPosition swigToEnum(int swigValue) {
      if (swigValue < swigValues.length && swigValue >= 0 && swigValues[swigValue].swigValue == swigValue)
        return swigValues[swigValue];
      for (int i = 0; i < swigValues.length; i++)
        if (swigValues[i].swigValue == swigValue)
          return swigValues[i];
      throw new IllegalArgumentException("No enum " + FingerPosition.class + " with value " + swigValue);
    }

    private FingerPosition(String swigName) {
      this.swigName = swigName;
      this.swigValue = swigNext++;
    }

    private FingerPosition(String swigName, int swigValue) {
      this.swigName = swigName;
      this.swigValue = swigValue;
      swigNext = swigValue+1;
    }

    private FingerPosition(String swigName, FingerPosition swigEnum) {
      this.swigName = swigName;
      this.swigValue = swigEnum.swigValue;
      swigNext = this.swigValue+1;
    }

    private static FingerPosition[] swigValues = { UNKNOWN, RIGHT_THUMB, RIGHT_INDEX_FINGER, RIGHT_MIDDLE_FINGER, RIGHT_RING_FINGER, RIGHT_LITTLE_FINGER, LEFT_THUMB, LEFT_INDEX_FINGER, LEFT_MIDDLE_FINGER, LEFT_RING_FINGER, LEFT_LITTLE_FINGER, PLAIN_RIGHT_THUMB, PLAIN_LEFT_THUMB, PLAIN_RIGHT_FOUR_FINGERS, PLAIN_LEFT_FOUR_FINGERS, LEFT_AND_RIGHT_THUMBS, RIGHT_EXTRA_DIGIT, LEFT_EXTRA_DIGIT, UNKNOWN_FRICTION_RIDGE, EJI_OR_TIP, UNKNOWN_PALM, RIGHT_FULL_PALM, RIGHT_WRITERS_PALM, LEFT_FULL_PALM, LEFT_WRITERS_PALM, RIGHT_LOWER_PALM, RIGHT_UPPER_PALM, LEFT_LOWER_PALM, LEFT_UPPER_PALM, RIGHT_OTHER, LEFT_OTHER, RIGHT_INTERDIGITAL, RIGHT_THENAR, RIGHT_HYPOTHENAR, LEFT_INTERDIGITAL, LEFT_THENAR, LEFT_HYPOTHENAR, RIGHT_GRASP, LEFT_GRASP, RIGHT_CARPAL_DELTA_AREA, LEFT_CARPAL_DELTA_AREA, RIGHT_FULL_PALM_INC_WRITERS_PALM, LEFT_FULL_PALM_INC_WRITERS_PALM, RIGHT_WRIST_BRACELET, LEFT_WRIST_BRACELET };
    private static int swigNext = 0;
    private final int swigValue;
    private final String swigName;
  }

  public final static class ImpressionType {
    public final static NIST.ImpressionType LIVE_SCAN_PLAIN = new NIST.ImpressionType("LIVE_SCAN_PLAIN", NISTWrapperJNI.NIST_LIVE_SCAN_PLAIN_get());
    public final static NIST.ImpressionType LIVE_SCAN_ROLLED = new NIST.ImpressionType("LIVE_SCAN_ROLLED", NISTWrapperJNI.NIST_LIVE_SCAN_ROLLED_get());
    public final static NIST.ImpressionType NON_LIVE_SCAN_PLAIN = new NIST.ImpressionType("NON_LIVE_SCAN_PLAIN", NISTWrapperJNI.NIST_NON_LIVE_SCAN_PLAIN_get());
    public final static NIST.ImpressionType NON_LIVE_SCAN_ROLLED = new NIST.ImpressionType("NON_LIVE_SCAN_ROLLED", NISTWrapperJNI.NIST_NON_LIVE_SCAN_ROLLED_get());
    public final static NIST.ImpressionType LATENT_IMPRESSION = new NIST.ImpressionType("LATENT_IMPRESSION", NISTWrapperJNI.NIST_LATENT_IMPRESSION_get());
    public final static NIST.ImpressionType LATENT_TRACING = new NIST.ImpressionType("LATENT_TRACING", NISTWrapperJNI.NIST_LATENT_TRACING_get());
    public final static NIST.ImpressionType LATENT_PHOTO = new NIST.ImpressionType("LATENT_PHOTO", NISTWrapperJNI.NIST_LATENT_PHOTO_get());
    public final static NIST.ImpressionType LATENT_LIFT = new NIST.ImpressionType("LATENT_LIFT", NISTWrapperJNI.NIST_LATENT_LIFT_get());
    public final static NIST.ImpressionType LIVE_SCAN_VERTICAL_SWIPE_PLAIN = new NIST.ImpressionType("LIVE_SCAN_VERTICAL_SWIPE_PLAIN", NISTWrapperJNI.NIST_LIVE_SCAN_VERTICAL_SWIPE_PLAIN_get());
    public final static NIST.ImpressionType LIVE_SCAN_PALM = new NIST.ImpressionType("LIVE_SCAN_PALM", NISTWrapperJNI.NIST_LIVE_SCAN_PALM_get());
    public final static NIST.ImpressionType NON_LIVE_SCAN_PALM = new NIST.ImpressionType("NON_LIVE_SCAN_PALM", NISTWrapperJNI.NIST_NON_LIVE_SCAN_PALM_get());
    public final static NIST.ImpressionType LATENT_PALM_IMPRESSION = new NIST.ImpressionType("LATENT_PALM_IMPRESSION", NISTWrapperJNI.NIST_LATENT_PALM_IMPRESSION_get());
    public final static NIST.ImpressionType LATENT_PALM_TRACING = new NIST.ImpressionType("LATENT_PALM_TRACING", NISTWrapperJNI.NIST_LATENT_PALM_TRACING_get());
    public final static NIST.ImpressionType LATENT_PALM_PHOTO = new NIST.ImpressionType("LATENT_PALM_PHOTO", NISTWrapperJNI.NIST_LATENT_PALM_PHOTO_get());
    public final static NIST.ImpressionType LATENT_PALM_LIFT = new NIST.ImpressionType("LATENT_PALM_LIFT", NISTWrapperJNI.NIST_LATENT_PALM_LIFT_get());
    public final static NIST.ImpressionType LIVE_SCAN_OPTICAL_CONTACT_PLAIN = new NIST.ImpressionType("LIVE_SCAN_OPTICAL_CONTACT_PLAIN", NISTWrapperJNI.NIST_LIVE_SCAN_OPTICAL_CONTACT_PLAIN_get());
    public final static NIST.ImpressionType LIVE_SCAN_OPTICAL_CONTACT_ROLLED = new NIST.ImpressionType("LIVE_SCAN_OPTICAL_CONTACT_ROLLED", NISTWrapperJNI.NIST_LIVE_SCAN_OPTICAL_CONTACT_ROLLED_get());
    public final static NIST.ImpressionType LIVE_SCAN_NON_OPTICAL_CONTACT_PLAIN = new NIST.ImpressionType("LIVE_SCAN_NON_OPTICAL_CONTACT_PLAIN", NISTWrapperJNI.NIST_LIVE_SCAN_NON_OPTICAL_CONTACT_PLAIN_get());
    public final static NIST.ImpressionType LIVE_SCAN_NON_OPTICAL_CONTACT_ROLLED = new NIST.ImpressionType("LIVE_SCAN_NON_OPTICAL_CONTACT_ROLLED", NISTWrapperJNI.NIST_LIVE_SCAN_NON_OPTICAL_CONTACT_ROLLED_get());
    public final static NIST.ImpressionType LIVE_SCAN_OPTICAL_CONTACTLESS_PLAIN = new NIST.ImpressionType("LIVE_SCAN_OPTICAL_CONTACTLESS_PLAIN", NISTWrapperJNI.NIST_LIVE_SCAN_OPTICAL_CONTACTLESS_PLAIN_get());
    public final static NIST.ImpressionType LIVE_SCAN_OPTICAL_CONTACTLESS_ROLLED = new NIST.ImpressionType("LIVE_SCAN_OPTICAL_CONTACTLESS_ROLLED", NISTWrapperJNI.NIST_LIVE_SCAN_OPTICAL_CONTACTLESS_ROLLED_get());
    public final static NIST.ImpressionType LIVE_SCAN_NON_OPTICAL_CONTACTLESS_PLAIN = new NIST.ImpressionType("LIVE_SCAN_NON_OPTICAL_CONTACTLESS_PLAIN", NISTWrapperJNI.NIST_LIVE_SCAN_NON_OPTICAL_CONTACTLESS_PLAIN_get());
    public final static NIST.ImpressionType LIVE_SCAN_NON_OPTICAL_CONTACTLESS_ROLLED = new NIST.ImpressionType("LIVE_SCAN_NON_OPTICAL_CONTACTLESS_ROLLED", NISTWrapperJNI.NIST_LIVE_SCAN_NON_OPTICAL_CONTACTLESS_ROLLED_get());

    public final int swigValue() {
      return swigValue;
    }

    public String toString() {
      return swigName;
    }

    public static ImpressionType swigToEnum(int swigValue) {
      if (swigValue < swigValues.length && swigValue >= 0 && swigValues[swigValue].swigValue == swigValue)
        return swigValues[swigValue];
      for (int i = 0; i < swigValues.length; i++)
        if (swigValues[i].swigValue == swigValue)
          return swigValues[i];
      throw new IllegalArgumentException("No enum " + ImpressionType.class + " with value " + swigValue);
    }

    private ImpressionType(String swigName) {
      this.swigName = swigName;
      this.swigValue = swigNext++;
    }

    private ImpressionType(String swigName, int swigValue) {
      this.swigName = swigName;
      this.swigValue = swigValue;
      swigNext = swigValue+1;
    }

    private ImpressionType(String swigName, ImpressionType swigEnum) {
      this.swigName = swigName;
      this.swigValue = swigEnum.swigValue;
      swigNext = this.swigValue+1;
    }

    private static ImpressionType[] swigValues = { LIVE_SCAN_PLAIN, LIVE_SCAN_ROLLED, NON_LIVE_SCAN_PLAIN, NON_LIVE_SCAN_ROLLED, LATENT_IMPRESSION, LATENT_TRACING, LATENT_PHOTO, LATENT_LIFT, LIVE_SCAN_VERTICAL_SWIPE_PLAIN, LIVE_SCAN_PALM, NON_LIVE_SCAN_PALM, LATENT_PALM_IMPRESSION, LATENT_PALM_TRACING, LATENT_PALM_PHOTO, LATENT_PALM_LIFT, LIVE_SCAN_OPTICAL_CONTACT_PLAIN, LIVE_SCAN_OPTICAL_CONTACT_ROLLED, LIVE_SCAN_NON_OPTICAL_CONTACT_PLAIN, LIVE_SCAN_NON_OPTICAL_CONTACT_ROLLED, LIVE_SCAN_OPTICAL_CONTACTLESS_PLAIN, LIVE_SCAN_OPTICAL_CONTACTLESS_ROLLED, LIVE_SCAN_NON_OPTICAL_CONTACTLESS_PLAIN, LIVE_SCAN_NON_OPTICAL_CONTACTLESS_ROLLED };
    private static int swigNext = 0;
    private final int swigValue;
    private final String swigName;
  }

  public final static class AudioObjectDescriptorCode {
    public final static NIST.AudioObjectDescriptorCode INTERNAL_DIGITAL_VOICE_FILE = new NIST.AudioObjectDescriptorCode("INTERNAL_DIGITAL_VOICE_FILE", NISTWrapperJNI.NIST_INTERNAL_DIGITAL_VOICE_FILE_get());
    public final static NIST.AudioObjectDescriptorCode EXTERNAL_DIGITAL_VOICE_FILE = new NIST.AudioObjectDescriptorCode("EXTERNAL_DIGITAL_VOICE_FILE", NISTWrapperJNI.NIST_EXTERNAL_DIGITAL_VOICE_FILE_get());
    public final static NIST.AudioObjectDescriptorCode PHYSICAL_MEDIA_CONTAINING_DIGITAL_DATA = new NIST.AudioObjectDescriptorCode("PHYSICAL_MEDIA_CONTAINING_DIGITAL_DATA", NISTWrapperJNI.NIST_PHYSICAL_MEDIA_CONTAINING_DIGITAL_DATA_get());
    public final static NIST.AudioObjectDescriptorCode PHYSICAL_MEDIA_CONTAINING_ANALOG_SINGALS = new NIST.AudioObjectDescriptorCode("PHYSICAL_MEDIA_CONTAINING_ANALOG_SINGALS", NISTWrapperJNI.NIST_PHYSICAL_MEDIA_CONTAINING_ANALOG_SINGALS_get());
    public final static NIST.AudioObjectDescriptorCode PHYSICAL_MEDIA_CONTAINING_UNKNOWN_DATA_OR_SIGNALS = new NIST.AudioObjectDescriptorCode("PHYSICAL_MEDIA_CONTAINING_UNKNOWN_DATA_OR_SIGNALS", NISTWrapperJNI.NIST_PHYSICAL_MEDIA_CONTAINING_UNKNOWN_DATA_OR_SIGNALS_get());
    public final static NIST.AudioObjectDescriptorCode NO_AUDIO_OBJECT_ASSOCIATED_WITH_THIS_RECORD = new NIST.AudioObjectDescriptorCode("NO_AUDIO_OBJECT_ASSOCIATED_WITH_THIS_RECORD", NISTWrapperJNI.NIST_NO_AUDIO_OBJECT_ASSOCIATED_WITH_THIS_RECORD_get());

    public final int swigValue() {
      return swigValue;
    }

    public String toString() {
      return swigName;
    }

    public static AudioObjectDescriptorCode swigToEnum(int swigValue) {
      if (swigValue < swigValues.length && swigValue >= 0 && swigValues[swigValue].swigValue == swigValue)
        return swigValues[swigValue];
      for (int i = 0; i < swigValues.length; i++)
        if (swigValues[i].swigValue == swigValue)
          return swigValues[i];
      throw new IllegalArgumentException("No enum " + AudioObjectDescriptorCode.class + " with value " + swigValue);
    }

    private AudioObjectDescriptorCode(String swigName) {
      this.swigName = swigName;
      this.swigValue = swigNext++;
    }

    private AudioObjectDescriptorCode(String swigName, int swigValue) {
      this.swigName = swigName;
      this.swigValue = swigValue;
      swigNext = swigValue+1;
    }

    private AudioObjectDescriptorCode(String swigName, AudioObjectDescriptorCode swigEnum) {
      this.swigName = swigName;
      this.swigValue = swigEnum.swigValue;
      swigNext = this.swigValue+1;
    }

    private static AudioObjectDescriptorCode[] swigValues = { INTERNAL_DIGITAL_VOICE_FILE, EXTERNAL_DIGITAL_VOICE_FILE, PHYSICAL_MEDIA_CONTAINING_DIGITAL_DATA, PHYSICAL_MEDIA_CONTAINING_ANALOG_SINGALS, PHYSICAL_MEDIA_CONTAINING_UNKNOWN_DATA_OR_SIGNALS, NO_AUDIO_OBJECT_ASSOCIATED_WITH_THIS_RECORD };
    private static int swigNext = 0;
    private final int swigValue;
    private final String swigName;
  }

  public final static class AcquisitionSourceType {
    public final static NIST.AcquisitionSourceType UNSPECIFIED_OR_UNKNOWN = new NIST.AcquisitionSourceType("UNSPECIFIED_OR_UNKNOWN", NISTWrapperJNI.NIST_UNSPECIFIED_OR_UNKNOWN_get());
    public final static NIST.AcquisitionSourceType STATIC_DIGITAL_IMAGE_FROM_AN_UNKNOWN_SOURCE = new NIST.AcquisitionSourceType("STATIC_DIGITAL_IMAGE_FROM_AN_UNKNOWN_SOURCE", NISTWrapperJNI.NIST_STATIC_DIGITAL_IMAGE_FROM_AN_UNKNOWN_SOURCE_get());
    public final static NIST.AcquisitionSourceType STATIC_DIGITAL_IMAGE_FROM_A_DIGITAL_STILL_IMAGE_CAMERA = new NIST.AcquisitionSourceType("STATIC_DIGITAL_IMAGE_FROM_A_DIGITAL_STILL_IMAGE_CAMERA", NISTWrapperJNI.NIST_STATIC_DIGITAL_IMAGE_FROM_A_DIGITAL_STILL_IMAGE_CAMERA_get());
    public final static NIST.AcquisitionSourceType STATIC_DIGITAL_IMAGE_FROM_A_SCANNER = new NIST.AcquisitionSourceType("STATIC_DIGITAL_IMAGE_FROM_A_SCANNER", NISTWrapperJNI.NIST_STATIC_DIGITAL_IMAGE_FROM_A_SCANNER_get());
    public final static NIST.AcquisitionSourceType SINGLE_VIDEO_FRAME_FROM_AN_UNKNOWN_SOURCE = new NIST.AcquisitionSourceType("SINGLE_VIDEO_FRAME_FROM_AN_UNKNOWN_SOURCE", NISTWrapperJNI.NIST_SINGLE_VIDEO_FRAME_FROM_AN_UNKNOWN_SOURCE_get());
    public final static NIST.AcquisitionSourceType SINGLE_VIDEO_FRAME_FROM_AN_ANALOG_VIDEO_CAMERA = new NIST.AcquisitionSourceType("SINGLE_VIDEO_FRAME_FROM_AN_ANALOG_VIDEO_CAMERA", NISTWrapperJNI.NIST_SINGLE_VIDEO_FRAME_FROM_AN_ANALOG_VIDEO_CAMERA_get());
    public final static NIST.AcquisitionSourceType SINGLE_VIDEO_FRAME_FROM_A_DIGITAL_VIDEO_CAMERA = new NIST.AcquisitionSourceType("SINGLE_VIDEO_FRAME_FROM_A_DIGITAL_VIDEO_CAMERA", NISTWrapperJNI.NIST_SINGLE_VIDEO_FRAME_FROM_A_DIGITAL_VIDEO_CAMERA_get());
    public final static NIST.AcquisitionSourceType VIDEO_SEQUENCE_FROM_AN_UNKNOWN_SOURCE = new NIST.AcquisitionSourceType("VIDEO_SEQUENCE_FROM_AN_UNKNOWN_SOURCE", NISTWrapperJNI.NIST_VIDEO_SEQUENCE_FROM_AN_UNKNOWN_SOURCE_get());
    public final static NIST.AcquisitionSourceType VIDEO_SEQUENCE_FROM_AN_ANALOG_VIDEO_CAMERA_STORED_IN_ANALOG_FORMAT = new NIST.AcquisitionSourceType("VIDEO_SEQUENCE_FROM_AN_ANALOG_VIDEO_CAMERA_STORED_IN_ANALOG_FORMAT", NISTWrapperJNI.NIST_VIDEO_SEQUENCE_FROM_AN_ANALOG_VIDEO_CAMERA_STORED_IN_ANALOG_FORMAT_get());
    public final static NIST.AcquisitionSourceType VIDEO_SEQUENCE_FROM_AN_ANALOG_VIDEO_CAMERA_STORED_IN_DIGITAL_FORMAT = new NIST.AcquisitionSourceType("VIDEO_SEQUENCE_FROM_AN_ANALOG_VIDEO_CAMERA_STORED_IN_DIGITAL_FORMAT", NISTWrapperJNI.NIST_VIDEO_SEQUENCE_FROM_AN_ANALOG_VIDEO_CAMERA_STORED_IN_DIGITAL_FORMAT_get());
    public final static NIST.AcquisitionSourceType VIDEO_SEQUENCE_FROM_A_DIGITAL_VIDEO_CAMERA = new NIST.AcquisitionSourceType("VIDEO_SEQUENCE_FROM_A_DIGITAL_VIDEO_CAMERA", NISTWrapperJNI.NIST_VIDEO_SEQUENCE_FROM_A_DIGITAL_VIDEO_CAMERA_get());
    public final static NIST.AcquisitionSourceType COMPUTER_SCREEN_IMAGE_CAPTURE = new NIST.AcquisitionSourceType("COMPUTER_SCREEN_IMAGE_CAPTURE", NISTWrapperJNI.NIST_COMPUTER_SCREEN_IMAGE_CAPTURE_get());
    public final static NIST.AcquisitionSourceType ANALOG_AUDIO_RECORDING_DEVICE_STORED_IN_ANALOG_FORM = new NIST.AcquisitionSourceType("ANALOG_AUDIO_RECORDING_DEVICE_STORED_IN_ANALOG_FORM", NISTWrapperJNI.NIST_ANALOG_AUDIO_RECORDING_DEVICE_STORED_IN_ANALOG_FORM_get());
    public final static NIST.AcquisitionSourceType ANALOG_AUDIO_RECORDING_DEVICE_CONVERTED_TO_DIGITAL = new NIST.AcquisitionSourceType("ANALOG_AUDIO_RECORDING_DEVICE_CONVERTED_TO_DIGITAL", NISTWrapperJNI.NIST_ANALOG_AUDIO_RECORDING_DEVICE_CONVERTED_TO_DIGITAL_get());
    public final static NIST.AcquisitionSourceType DIGITAL_AUDIO_RECORDING_DEVICE = new NIST.AcquisitionSourceType("DIGITAL_AUDIO_RECORDING_DEVICE", NISTWrapperJNI.NIST_DIGITAL_AUDIO_RECORDING_DEVICE_get());
    public final static NIST.AcquisitionSourceType LANDLINE_TELEPHONE_BOTH_SENDER_AND_RECEIVER = new NIST.AcquisitionSourceType("LANDLINE_TELEPHONE_BOTH_SENDER_AND_RECEIVER", NISTWrapperJNI.NIST_LANDLINE_TELEPHONE_BOTH_SENDER_AND_RECEIVER_get());
    public final static NIST.AcquisitionSourceType MOBILE_TELEPHONE_BOTH_SENDER_AND_RECEIVER = new NIST.AcquisitionSourceType("MOBILE_TELEPHONE_BOTH_SENDER_AND_RECEIVER", NISTWrapperJNI.NIST_MOBILE_TELEPHONE_BOTH_SENDER_AND_RECEIVER_get());
    public final static NIST.AcquisitionSourceType SATELLITE_TELEPHONE_BOTH_SENDER_AND_RECEIVER = new NIST.AcquisitionSourceType("SATELLITE_TELEPHONE_BOTH_SENDER_AND_RECEIVER", NISTWrapperJNI.NIST_SATELLITE_TELEPHONE_BOTH_SENDER_AND_RECEIVER_get());
    public final static NIST.AcquisitionSourceType TELEPHONE_UNKNOWN_OR_MIXED_SOURCES = new NIST.AcquisitionSourceType("TELEPHONE_UNKNOWN_OR_MIXED_SOURCES", NISTWrapperJNI.NIST_TELEPHONE_UNKNOWN_OR_MIXED_SOURCES_get());
    public final static NIST.AcquisitionSourceType TELEVISION_NSTC = new NIST.AcquisitionSourceType("TELEVISION_NSTC", NISTWrapperJNI.NIST_TELEVISION_NSTC_get());
    public final static NIST.AcquisitionSourceType TELEVISION_PAL = new NIST.AcquisitionSourceType("TELEVISION_PAL", NISTWrapperJNI.NIST_TELEVISION_PAL_get());
    public final static NIST.AcquisitionSourceType TELEVISION_OTHER = new NIST.AcquisitionSourceType("TELEVISION_OTHER", NISTWrapperJNI.NIST_TELEVISION_OTHER_get());
    public final static NIST.AcquisitionSourceType VOICE_OVER_INTERNET_PROTOCOL = new NIST.AcquisitionSourceType("VOICE_OVER_INTERNET_PROTOCOL", NISTWrapperJNI.NIST_VOICE_OVER_INTERNET_PROTOCOL_get());
    public final static NIST.AcquisitionSourceType RADIO_TRANSMISSION_SHORT_WAVE = new NIST.AcquisitionSourceType("RADIO_TRANSMISSION_SHORT_WAVE", NISTWrapperJNI.NIST_RADIO_TRANSMISSION_SHORT_WAVE_get());
    public final static NIST.AcquisitionSourceType RADIO_TRANSMISSION_AMATEUR_RADIO = new NIST.AcquisitionSourceType("RADIO_TRANSMISSION_AMATEUR_RADIO", NISTWrapperJNI.NIST_RADIO_TRANSMISSION_AMATEUR_RADIO_get());
    public final static NIST.AcquisitionSourceType RADIO_TRANSMISSION_FM = new NIST.AcquisitionSourceType("RADIO_TRANSMISSION_FM", NISTWrapperJNI.NIST_RADIO_TRANSMISSION_FM_get());
    public final static NIST.AcquisitionSourceType RADIO_TRANSMISSION_LONG_WAVE = new NIST.AcquisitionSourceType("RADIO_TRANSMISSION_LONG_WAVE", NISTWrapperJNI.NIST_RADIO_TRANSMISSION_LONG_WAVE_get());
    public final static NIST.AcquisitionSourceType RADIO_TRANSMISSION_AM = new NIST.AcquisitionSourceType("RADIO_TRANSMISSION_AM", NISTWrapperJNI.NIST_RADIO_TRANSMISSION_AM_get());
    public final static NIST.AcquisitionSourceType RADIO_TRANSMISSION_AIRCRAFT_FREQUENCIES = new NIST.AcquisitionSourceType("RADIO_TRANSMISSION_AIRCRAFT_FREQUENCIES", NISTWrapperJNI.NIST_RADIO_TRANSMISSION_AIRCRAFT_FREQUENCIES_get());

    public final int swigValue() {
      return swigValue;
    }

    public String toString() {
      return swigName;
    }

    public static AcquisitionSourceType swigToEnum(int swigValue) {
      if (swigValue < swigValues.length && swigValue >= 0 && swigValues[swigValue].swigValue == swigValue)
        return swigValues[swigValue];
      for (int i = 0; i < swigValues.length; i++)
        if (swigValues[i].swigValue == swigValue)
          return swigValues[i];
      throw new IllegalArgumentException("No enum " + AcquisitionSourceType.class + " with value " + swigValue);
    }

    private AcquisitionSourceType(String swigName) {
      this.swigName = swigName;
      this.swigValue = swigNext++;
    }

    private AcquisitionSourceType(String swigName, int swigValue) {
      this.swigName = swigName;
      this.swigValue = swigValue;
      swigNext = swigValue+1;
    }

    private AcquisitionSourceType(String swigName, AcquisitionSourceType swigEnum) {
      this.swigName = swigName;
      this.swigValue = swigEnum.swigValue;
      swigNext = this.swigValue+1;
    }

    private static AcquisitionSourceType[] swigValues = { UNSPECIFIED_OR_UNKNOWN, STATIC_DIGITAL_IMAGE_FROM_AN_UNKNOWN_SOURCE, STATIC_DIGITAL_IMAGE_FROM_A_DIGITAL_STILL_IMAGE_CAMERA, STATIC_DIGITAL_IMAGE_FROM_A_SCANNER, SINGLE_VIDEO_FRAME_FROM_AN_UNKNOWN_SOURCE, SINGLE_VIDEO_FRAME_FROM_AN_ANALOG_VIDEO_CAMERA, SINGLE_VIDEO_FRAME_FROM_A_DIGITAL_VIDEO_CAMERA, VIDEO_SEQUENCE_FROM_AN_UNKNOWN_SOURCE, VIDEO_SEQUENCE_FROM_AN_ANALOG_VIDEO_CAMERA_STORED_IN_ANALOG_FORMAT, VIDEO_SEQUENCE_FROM_AN_ANALOG_VIDEO_CAMERA_STORED_IN_DIGITAL_FORMAT, VIDEO_SEQUENCE_FROM_A_DIGITAL_VIDEO_CAMERA, COMPUTER_SCREEN_IMAGE_CAPTURE, ANALOG_AUDIO_RECORDING_DEVICE_STORED_IN_ANALOG_FORM, ANALOG_AUDIO_RECORDING_DEVICE_CONVERTED_TO_DIGITAL, DIGITAL_AUDIO_RECORDING_DEVICE, LANDLINE_TELEPHONE_BOTH_SENDER_AND_RECEIVER, MOBILE_TELEPHONE_BOTH_SENDER_AND_RECEIVER, SATELLITE_TELEPHONE_BOTH_SENDER_AND_RECEIVER, TELEPHONE_UNKNOWN_OR_MIXED_SOURCES, TELEVISION_NSTC, TELEVISION_PAL, TELEVISION_OTHER, VOICE_OVER_INTERNET_PROTOCOL, RADIO_TRANSMISSION_SHORT_WAVE, RADIO_TRANSMISSION_AMATEUR_RADIO, RADIO_TRANSMISSION_FM, RADIO_TRANSMISSION_LONG_WAVE, RADIO_TRANSMISSION_AM, RADIO_TRANSMISSION_AIRCRAFT_FREQUENCIES };
    private static int swigNext = 0;
    private final int swigValue;
    private final String swigName;
  }

  public final static class RecordFormat {
    public final static NIST.RecordFormat CJIS = new NIST.RecordFormat("CJIS", NISTWrapperJNI.NIST_CJIS_get());
    public final static NIST.RecordFormat INTERPOL = new NIST.RecordFormat("INTERPOL", NISTWrapperJNI.NIST_INTERPOL_get());

    public final int swigValue() {
      return swigValue;
    }

    public String toString() {
      return swigName;
    }

    public static RecordFormat swigToEnum(int swigValue) {
      if (swigValue < swigValues.length && swigValue >= 0 && swigValues[swigValue].swigValue == swigValue)
        return swigValues[swigValue];
      for (int i = 0; i < swigValues.length; i++)
        if (swigValues[i].swigValue == swigValue)
          return swigValues[i];
      throw new IllegalArgumentException("No enum " + RecordFormat.class + " with value " + swigValue);
    }

    private RecordFormat(String swigName) {
      this.swigName = swigName;
      this.swigValue = swigNext++;
    }

    private RecordFormat(String swigName, int swigValue) {
      this.swigName = swigName;
      this.swigValue = swigValue;
      swigNext = swigValue+1;
    }

    private RecordFormat(String swigName, RecordFormat swigEnum) {
      this.swigName = swigName;
      this.swigValue = swigEnum.swigValue;
      swigNext = this.swigValue+1;
    }

    private static RecordFormat[] swigValues = { CJIS, INTERPOL };
    private static int swigNext = 0;
    private final int swigValue;
    private final String swigName;
  }

  public final static class IrisType {
    public final static NIST.IrisType UNDEFINED = new NIST.IrisType("UNDEFINED", NISTWrapperJNI.NIST_UNDEFINED_get());
    public final static NIST.IrisType RIGHT_IRIS = new NIST.IrisType("RIGHT_IRIS", NISTWrapperJNI.NIST_RIGHT_IRIS_get());
    public final static NIST.IrisType LEFT_IRIS = new NIST.IrisType("LEFT_IRIS", NISTWrapperJNI.NIST_LEFT_IRIS_get());

    public final int swigValue() {
      return swigValue;
    }

    public String toString() {
      return swigName;
    }

    public static IrisType swigToEnum(int swigValue) {
      if (swigValue < swigValues.length && swigValue >= 0 && swigValues[swigValue].swigValue == swigValue)
        return swigValues[swigValue];
      for (int i = 0; i < swigValues.length; i++)
        if (swigValues[i].swigValue == swigValue)
          return swigValues[i];
      throw new IllegalArgumentException("No enum " + IrisType.class + " with value " + swigValue);
    }

    private IrisType(String swigName) {
      this.swigName = swigName;
      this.swigValue = swigNext++;
    }

    private IrisType(String swigName, int swigValue) {
      this.swigName = swigName;
      this.swigValue = swigValue;
      swigNext = swigValue+1;
    }

    private IrisType(String swigName, IrisType swigEnum) {
      this.swigName = swigName;
      this.swigValue = swigEnum.swigValue;
      swigNext = this.swigValue+1;
    }

    private static IrisType[] swigValues = { UNDEFINED, RIGHT_IRIS, LEFT_IRIS };
    private static int swigNext = 0;
    private final int swigValue;
    private final String swigName;
  }

  public final static class OutputFormat {
    public final static NIST.OutputFormat NONE = new NIST.OutputFormat("NONE", NISTWrapperJNI.NIST_NONE_get());
    public final static NIST.OutputFormat BMP = new NIST.OutputFormat("BMP", NISTWrapperJNI.NIST_BMP_get());
    public final static NIST.OutputFormat PNG = new NIST.OutputFormat("PNG", NISTWrapperJNI.NIST_PNG_get());
    public final static NIST.OutputFormat TIFF = new NIST.OutputFormat("TIFF", NISTWrapperJNI.NIST_TIFF_get());

    public final int swigValue() {
      return swigValue;
    }

    public String toString() {
      return swigName;
    }

    public static OutputFormat swigToEnum(int swigValue) {
      if (swigValue < swigValues.length && swigValue >= 0 && swigValues[swigValue].swigValue == swigValue)
        return swigValues[swigValue];
      for (int i = 0; i < swigValues.length; i++)
        if (swigValues[i].swigValue == swigValue)
          return swigValues[i];
      throw new IllegalArgumentException("No enum " + OutputFormat.class + " with value " + swigValue);
    }

    private OutputFormat(String swigName) {
      this.swigName = swigName;
      this.swigValue = swigNext++;
    }

    private OutputFormat(String swigName, int swigValue) {
      this.swigName = swigName;
      this.swigValue = swigValue;
      swigNext = swigValue+1;
    }

    private OutputFormat(String swigName, OutputFormat swigEnum) {
      this.swigName = swigName;
      this.swigValue = swigEnum.swigValue;
      swigNext = this.swigValue+1;
    }

    private static OutputFormat[] swigValues = { NONE, BMP, PNG, TIFF };
    private static int swigNext = 0;
    private final int swigValue;
    private final String swigName;
  }

  public final static class SignatureType {
    public final static NIST.SignatureType SIGNATURE_OF_SUBJECT = new NIST.SignatureType("SIGNATURE_OF_SUBJECT", NISTWrapperJNI.NIST_SIGNATURE_OF_SUBJECT_get());
    public final static NIST.SignatureType SIGNATURE_OF_OPERATOR = new NIST.SignatureType("SIGNATURE_OF_OPERATOR", NISTWrapperJNI.NIST_SIGNATURE_OF_OPERATOR_get());

    public final int swigValue() {
      return swigValue;
    }

    public String toString() {
      return swigName;
    }

    public static SignatureType swigToEnum(int swigValue) {
      if (swigValue < swigValues.length && swigValue >= 0 && swigValues[swigValue].swigValue == swigValue)
        return swigValues[swigValue];
      for (int i = 0; i < swigValues.length; i++)
        if (swigValues[i].swigValue == swigValue)
          return swigValues[i];
      throw new IllegalArgumentException("No enum " + SignatureType.class + " with value " + swigValue);
    }

    private SignatureType(String swigName) {
      this.swigName = swigName;
      this.swigValue = swigNext++;
    }

    private SignatureType(String swigName, int swigValue) {
      this.swigName = swigName;
      this.swigValue = swigValue;
      swigNext = swigValue+1;
    }

    private SignatureType(String swigName, SignatureType swigEnum) {
      this.swigName = swigName;
      this.swigValue = swigEnum.swigValue;
      swigNext = this.swigValue+1;
    }

    private static SignatureType[] swigValues = { SIGNATURE_OF_SUBJECT, SIGNATURE_OF_OPERATOR };
    private static int swigNext = 0;
    private final int swigValue;
    private final String swigName;
  }

  public final static class SignatureRepresentationType {
    public final static NIST.SignatureRepresentationType SCANNED_NOT_COMPRESSED = new NIST.SignatureRepresentationType("SCANNED_NOT_COMPRESSED", NISTWrapperJNI.NIST_SCANNED_NOT_COMPRESSED_get());
    public final static NIST.SignatureRepresentationType SCANNED_AND_COMPRESSED = new NIST.SignatureRepresentationType("SCANNED_AND_COMPRESSED", NISTWrapperJNI.NIST_SCANNED_AND_COMPRESSED_get());
    public final static NIST.SignatureRepresentationType VECTOR_DATA = new NIST.SignatureRepresentationType("VECTOR_DATA", NISTWrapperJNI.NIST_VECTOR_DATA_get());

    public final int swigValue() {
      return swigValue;
    }

    public String toString() {
      return swigName;
    }

    public static SignatureRepresentationType swigToEnum(int swigValue) {
      if (swigValue < swigValues.length && swigValue >= 0 && swigValues[swigValue].swigValue == swigValue)
        return swigValues[swigValue];
      for (int i = 0; i < swigValues.length; i++)
        if (swigValues[i].swigValue == swigValue)
          return swigValues[i];
      throw new IllegalArgumentException("No enum " + SignatureRepresentationType.class + " with value " + swigValue);
    }

    private SignatureRepresentationType(String swigName) {
      this.swigName = swigName;
      this.swigValue = swigNext++;
    }

    private SignatureRepresentationType(String swigName, int swigValue) {
      this.swigName = swigName;
      this.swigValue = swigValue;
      swigNext = swigValue+1;
    }

    private SignatureRepresentationType(String swigName, SignatureRepresentationType swigEnum) {
      this.swigName = swigName;
      this.swigValue = swigEnum.swigValue;
      swigNext = this.swigValue+1;
    }

    private static SignatureRepresentationType[] swigValues = { SCANNED_NOT_COMPRESSED, SCANNED_AND_COMPRESSED, VECTOR_DATA };
    private static int swigNext = 0;
    private final int swigValue;
    private final String swigName;
  }

}
