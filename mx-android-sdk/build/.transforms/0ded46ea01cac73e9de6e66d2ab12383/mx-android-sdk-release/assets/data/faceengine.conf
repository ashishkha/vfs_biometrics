<?xml version="1.0"?>
<!--
         Configuration options are specified via faceengine.conf file which is basically 
    an XML document with special tag formatting. The document itself is not required 
    to exist, in this case FSDK will fall back to some default settings, which, 
    however, may not be suitable for several tasks.

    NOTE: Always remember that incorrect config may huck the things up very badly. 
    Pay attention to what you configure and how. Always double-check what you deploy.

    The location where the config file is found varies across different systems 
    but tries to be as consistent as possible. Path resolution is the following:
    Windows
        * Look for data/faceengine.conf in current working directory
    Linux
        * Look for /etc/visionlabs/faceengine.conf
        * Look for data/faceengine.conf in current working directory 
          if previous options fail

    The config file format is optimized for deserialization of several FSDK types:
        * Int1 - scalar 32 bit integral numeric type
        * Int2 - 2-d 32 bit integral numeric type (aka Vector2i, Size)
        * Int3 - 3-d 32 bit integral numeric type
        * Int4 - 4-d 32 bit integral numeric type (aka Rect)
        * Float1 - scalar 32 bit floating point numeric type
        * Float2 - 2-d 32 bit floating point numeric type (aka Vector2f)
        * Float3 - 3-d 32 bit floating point numeric type
        * Float4 - 4-d 32 bit floating point numeric type
        * String - short null-terminated string (max. 16 characters including the null-terminator)
-->
<settings>
        <section name="system">
                <!-- cpuClass: class of cpu by supported instructions - cpu, sse4, avx, avx2, arm,  auto. Default: "auto" -->
                <param name="cpuClass" type="Value::String" text="auto" />
                <!-- verboseLogging: level of log versobing. 0 - Errors, 1 - Warnings, 2 - Info, 3 - Debug; Default: 0  -->
                <param name="verboseLogging" type="Value::Int1" x="0" />
        </section>
        <!--
             Flower library is the default neural network inference engine used in FSDK since 2.6.x 
             development versions. The library is used for:
             * face detectors (MTCNN)
             * estimators (attributes, quality)
             * face descriptors
             Flower has a separate configuration entry since it is not part of the SDK but a dependency.
        -->
        <section name="flower">
                <!-- deviceClass: execution device type - cpu, gpu. Default: "cpu". Type: String -->
                <param name="deviceClass" type="Value::String" text="cpu" />
                <!-- numThreads: number of worker threads . Default: number of CPU logical cores. Type: Int1 -->
                <param name="numThreads" type="Value::Int1" x="12" />
                <param name="verboseLogging" type="Value::Int1" x="0" />
                <!-- numComputeStreams: number of streams; Increases performans, but works only with new verisons of nvidia drivers (375.82, 384.59 and more recent); Don't increase it with older version of nvidia driver. Default: 1. Type: Int1 -->
                <param name="numComputeStreams" type="Value::Int1" x="4" />
        </section>

        <!--
            Descriptor factory is a facility that creates descriptor extractors and matchers.
            Both of them utilize algorithms that require a number of coefficients ("weights")
            to operate properly.
        -->
        <section name="DescriptorFactory::Settings">
                <!--
                    Model: CNN face descriptor version.
                    Possible values: 44(default), 45.
                    Type: Int1.
                -->
                <param name="model" type="Value::Int1" x="46" />
                <!--
                    Distance: Distance between descriptors on matching. 
                        L1 faster, L2 make better precision.
                    Possible values: L1, L2.
                    Note: models 44, 45 and 45 supports just L2 distance
                    Type: String.
                -->
                <param name="distance" type="Value::String" text="L2" />
		<!-- descriptorCountWarningLevel: Threshold, that limits the ratio of created descriptors to the amount, defined by your liscence (0.9 by default). When the threshold is exceeded, FSDK prints the warning. --> 
                <param name="descriptorCountWarningLevel" type="Value::Setting" text="0.9" />

        </section>

        <!--
             MTCNN detector settings 
             Note: MTCNN doesn't use SizeHint options
        -->
        <section name="MTCNNDetector::Settings">
                <!-- PNetThreshold: PNet threshold in [0..1] range. Type: Float1 -->
                <param name="PNetThreshold" type="Value::Float1" x="0.6"/>
                <!-- RNetThreshold: RNet threshold in [0..1] range. Type: Float1 -->
                <param name="RNetThreshold" type="Value::Float1" x="0.7"/>
                <!-- ONetThreshold: ONet threshold in [0..1] range. Type: Float1 -->
                <param name="ONetThreshold" type="Value::Float1" x="0.93"/>
                <!-- These settings accelerate face detection at the cost of lower recall for smaller faces -->
                <!-- minSize: minimum face size in pixels Type: Int1 -->
                <param name="minSize" type="Value::Int1" x="50" />
                <!-- scaleFactor: image scale factor -->
                <param name="scaleFactor" type="Value::Float1" x="0.7" />
        </section>

        <!--
            LSH (local sensitivity hashing)
            
            LSH tables can be built from descriptor batches and are used as indices
            to accelerate matching.
        -->
        <section name="LSH::Settings">
                <!--
                    NumTables: Number of hash tables in LSH.
                    Increasing of numTables increases recall, but decreases performance. 
                    Type: Int1.
                -->
                <param name="numTables" type="Value::Int1" x="10" />
                <!--
                     Number of bits in one HASH table.
                     Increasing of numBits decreases recall, but increases performance. 
                     Type: Int1.
                -->
                <param name="numBits" type="Value::Int1" x="16" />
                <!--
                    NumProbes: Numer of probes.
                    Must be greater or equal to numTables.
                    If it greater, LSH works in multiprobing mode which have better recall
                    but worse performance. If it equal, LSH works without multiprobing mode.
                    Type: Int1.
                -->
                <param name="numProbes" type="Value::Int1" x="10" />
                <!--
                    NumThreads: number of threads.
                    If 0, number of threads will be choosed automaticly.
                    Type: Int1.
                -->
                <param name="numThreads" type="Value::Int1" x="1" />
                <!--
                     dimensions: final descriptor size for LSH
                     after optional PCA and cutting
                -->
                <param name="dimensions" type="Value::Int1" x="16" />
                <!--
                    PcaMatrixName[Optional]: name of binary file with PCA matrix. 
                    If not specified: LSH works without PCA.
                    Note: models 44 and 45 don't need PCA.
                    Type: String.
                -->
                <!--<param name="pcaMatrixName" type="Value::String" text="file.bin" />-->
                <!--
                     MeanPath[Optional]: name of file with mean descriptor. 
                     If not specified: Mean descriptor with zeros on all positions.
                     Note: mean descriptor is used after PCA, so you use PCA tou need mean descriptor after PCA
                    Note: models 44 and 45 don't need mean descriptor
                          in other case mean original descriptor.
                     Type: String
                -->
                <!--<param name="meanPath" type="Value::String" text="file.bin" />-->
        </section>

        <!--
             Quality estimator looks at several image parameters, like lightness (think overexposure), 
             darkness (think underexposure), blurriness and color saturation. 
             The resulting image quality is determined as the minimum of them. 
             To bring all four estimations to comparable ranges, sigmoid functions are used. 
             The configuration block contains those sigmoids parameters as 2d floats, 
             where x means magnitude and y means shift.
        -->
        <section name="QualityEstimator::Settings">
                <!-- size: size of central crop after resizing. Default: 74. Type: Int1  -->
                <param name="size" type="Value::Int1" x="74" />
                <param name="expLight" type="Value::Float3" x="0.00200007" y="1.92726878" z="0.62728513"/>
                <param name="expDark" type="Value::Float3" x=" 0.49512889" y="-2.03059026" z="0.57971328"/>
                <param name="logGray" type="Value::Float4" x="0.05952889" y="3.36637007" z="0.01256462" w="0.56434737"/>
                <param name="expBlur" type="Value::Float3" x="0.08730523" y="0.4781301" z="0.550524249"/>
                <param name="platt" type="Value::Float2" x="12.3675" y="-11.2875" />
        </section>
</settings>
